{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","search","bind","handleTermChange","this","onSearch","state","term","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","console","log","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","element","push","filter","results","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec88d56b.chunk.js","sourcesContent":["const cliendId = '68b585609b3e4b01b00091c4206d2e6b';\r\nconst redirectUri = 'http://localhost:3000/';\r\n\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        //check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${cliendId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        console.log(accessToken)\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n            {\r\n                headers:{\r\n                       Authorization: `Bearer ${accessToken}`\r\n                }\r\n            }).then(response => {\r\n                return response.json();\r\n            }).then(jsonResponse => {\r\n                if(!jsonResponse.tracks) {\r\n                    return [];\r\n                }\r\n                console.log(jsonResponse.tracks);\r\n                return jsonResponse.tracks.items.map( track => (\r\n                    {\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.uri\r\n                }));\r\n            })\r\n    },\r\n\r\n    savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {Authorization: `Bearer ${accessToken}`};\r\n        let userId;\r\n\r\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\r\n                {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ name: name })\r\n                }\r\n            ).then(response => response.json()\r\n            ).then(jsonResponse => {\r\n                const playlistId = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\r\n                    {\r\n                        headers: headers,\r\n                        method: 'POST',\r\n                        body: JSON.stringify({ uris: trackUris })\r\n                    }\r\n                )\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search(){\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(e){\r\n        this.setState({term: e.target.value})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            return <button className='Track-action' onClick={this.removeTrack}>-</button>\r\n        }else{\r\n            return <button className='Track-action' onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(e){\r\n        this.props.onNameChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\r\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true}/>\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave} >SAVE TO SPOTIFY</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {searchResults: [],\n    playlistName: 'Playlist Name',\n    playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  };\n\n  addTrack(track){\n    const tracks = this.state.playlistTracks;\n    if(tracks.find(element => element.id === track.id)){\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(element => element.id !== track.id);\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(name){\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist(){\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'new Playlist',\n        playlistTracks: []\n      })\n    })\n  } \n\n  search(term){\n    Spotify.search(term).then(results => this.setState({searchResults: results}));\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n            <Playlist playlistName={this.state.playlistName} \n                      playlistTracks={this.state.playlistTracks} \n                      onRemove={this.removeTrack} \n                      onNameChange={this.updatePlaylistName} \n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}